#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math, select
from types import SimpleNamespace

class Router:

    relations = {}
    sockets = {}
    ports = {}
    routingTable = []


    def __init__(self, asn, connections):
        print("Router at AS %s starting up" % asn)
        self.asn = asn
        
        for relationship in connections:
            port, neighbor, relation = relationship.split("-")
            self.sockets[neighbor] = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            self.sockets[neighbor].bind(('localhost', 0))
            self.ports[neighbor] = int(port)
            self.relations[neighbor] = relation
            self.send(neighbor, json.dumps({ "type": "handshake", "src": self.our_addr(neighbor), "dst": neighbor, "msg": {}  }))
    
    def our_addr(self, dst):
        quads = list(int(qdn) for qdn in dst.split('.'))
        quads[3] = 1
        return "%d.%d.%d.%d" % (quads[0], quads[1], quads[2], quads[3])

    def send(self, network, message):
        self.sockets[network].sendto(message.encode('utf-8'), ('localhost', self.ports[network]))

    def addRoutingEntry(self, network, netmask, ASPath, peer, localpref, selfOrigin, origin):
        self.routingTable.append({
            'network': network, 
            'netmask': netmask, 
            'ASPath': ASPath,
            'peer' : peer,
            'localpref' : localpref,
            'selfOrigin' : selfOrigin,
            'origin' : origin})

    def handleMsg(self, obj):
        print('handling msg: ')
        print(obj)
        match obj.type:
            case 'update':
                # 1 - save a copy

                # 2 - add to routing table
                self.addRoutingEntry(obj.msg.network, obj.msg.netmask, obj.msg.ASPath, 
                obj.src, obj.msg.localpref, obj.msg.selfOrigin, obj.msg.origin)

                # 3 - send copies to approproate neighbors
            case 'data':
                print('i am data')
            case 'dump':
                print('i am a dump')
    
    def run(self):
        while True:
            socks = select.select(self.sockets.values(), [], [], 0.1)[0]
            for conn in socks:
                k, addr = conn.recvfrom(65535)
                srcif = None
                for sock in self.sockets:
                    if self.sockets[sock] == conn:
                        srcif = sock
                        break
                msg = k.decode('utf-8')
                # from https://stackoverflow.com/questions/6578986/how-to-convert-json-data-into-a-python-object
                obj = json.loads(msg, object_hook=lambda d: SimpleNamespace(**d))
                self.handleMsg(obj)
                #print("Received message '%s' from %s" % (msg, srcif))

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='route packets')
    parser.add_argument('asn', type=int, help="AS number of this router")
    parser.add_argument('connections', metavar='connections', type=str, nargs='+', help="connections")
    args = parser.parse_args()
    router = Router(args.asn, args.connections)
    router.run()
